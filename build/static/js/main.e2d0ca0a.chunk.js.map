{"version":3,"sources":["pages/App.tsx","index.tsx"],"names":["CssTextField","withStyles","root","color","border","borderColor","TextField","useStyles","makeStyles","textAlign","typography_class","textDecoration","textDecorationColor","margin","textfield_label_class","textfield_text_class","add_button_class","width","borderRadius","backgroundColor","boxShadow","list_class","height","overflowY","paddingRight","list_item_class","background","marginBottom","paddingLeft","task_done_class","primary_text_class","fontSize","secondary_text_class","icon_class","modal_class","display","alignItems","justifyContent","paper_class","position","padding","modal_title_class","modal_input_class","modal_button_class","modal_div_buttons_class","App","classes","useState","openModalCreate","setOpenModalCreate","openModalUpdate","setOpenModalUpdate","inputTaskName","setInputTaskName","inputTaskDescription","setInputTaskDescription","updateTaskName","setUpdateTaskName","updateTaskDescription","setUpdateTaskDescription","idSelected","setIdSelected","tasks","setTasks","className","Typography","variant","Button","onClick","Modal","open","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","Box","component","value","label","onChange","e","target","InputLabelProps","InputProps","newTask","taskName","taskDescription","taskDone","handleSubmit","List","map","task","i","ListItem","handleOpenUpdateModal","ListItemText","primary","secondary","ListItemSecondaryAction","IconButton","toggleDone","newTasks","splice","handleDelete","handleUpdate","theme","createMuiTheme","typography","fontFamily","join","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"qVAsBMA,EAAeC,YAAW,CAC9BC,KAAM,CACJ,sBAAuB,CACrBC,MAAO,WAET,2BAA4B,CAC1B,aAAc,CACZC,OAAQ,qBAEV,mBAAoB,CAClBA,OAAQ,qBAEV,yBAA0B,CACxBC,YAAa,YAbAJ,CAiBlBK,KAGGC,EAAYC,YAAW,CAC3BN,KAAM,CACJC,MAAO,QACPM,UAAW,UAEbC,iBAAkB,CAChBC,eAAgB,YAChBC,oBAAqB,UACrBC,OAAQ,uBAEVC,sBAAuB,CACrBX,MAAO,SAETY,qBAAsB,CACpBZ,MAAO,SAETa,iBAAkB,CAChBC,MAAO,MACPd,MAAO,QACPU,OAAQ,sBACRT,OAAQ,oBACRc,aAAc,OACdC,gBAAiB,UACjB,UAAW,CACTA,gBAAiB,WAEnB,WAAY,CACVd,YAAa,WAEf,UAAW,CACTe,UAAW,oCAGfC,WAAY,CACVJ,MAAO,MACPK,OAAQ,OACRT,OAAQ,OACRU,UAAW,SACXC,aAAc,QAEhB,UAAW,CACT,uBAAwB,CACtBP,MAAO,OAET,6BAA8B,CAC5BE,gBAAiB,YAGrBM,gBAAiB,CACfrB,OAAQ,oBACRc,aAAc,OACdQ,WAAY,UACZC,aAAc,OACdC,YAAa,OACb,UAAW,CACTF,WAAY,YAGhBG,gBAAiB,CACflB,eAAgB,eAChBC,oBAAqB,OAEvBkB,mBAAoB,CAClBC,SAAU,OACV5B,MAAO,SAET6B,qBAAsB,CACpBD,SAAU,OACV5B,MAAO,WAET8B,WAAY,CACV9B,MAAO,UACP4B,SAAU,QAEZG,YAAa,CACXC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAElBC,YAAa,CACXnC,MAAO,QACPgB,gBAAiB,UACjBf,OAAQ,oBACRc,aAAc,OACdqB,SAAU,WACVtB,MAAO,MACPuB,QAAS,uBAEXC,kBAAmB,CACjBhC,UAAW,SACXI,OAAQ,sBAEV6B,kBAAmB,CACjBzB,MAAO,OACPJ,OAAQ,aAEV8B,mBAAoB,CAClBxC,MAAO,UACPc,MAAO,MACPJ,OAAQ,sBACR,UAAW,CACTV,MAAO,QACPgB,gBAAiB,WAEnB,WAAY,CACVd,YAAa,WAEf,UAAW,CACTe,UAAW,oCAGfwB,wBAAyB,CACvBnC,UAAW,YAsQAoC,MA9Pf,WAIE,IAAMC,EAAUvC,IAIhB,EAA8CwC,oBAAkB,GAAhE,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAA8CF,oBAAkB,GAAhE,mBAAOG,EAAP,KAAwBC,EAAxB,KAIA,EAA0CJ,mBAAiB,IAA3D,mBAAOK,EAAP,KAAsBC,EAAtB,KACA,EAAwDN,mBAAiB,IAAzE,mBAAOO,EAAP,KAA6BC,EAA7B,KAIA,EAA4CR,qBAA5C,mBAAOS,EAAP,KAAuBC,EAAvB,KACA,EAA0DV,qBAA1D,mBAAOW,EAAP,KAA8BC,EAA9B,KAIA,EAAoCZ,oBAAkB,GAAtD,mBAAOa,EAAP,KAAmBC,EAAnB,KAIA,EAA0Bd,mBAAkB,IAA5C,mBAAOe,EAAP,KAAcC,EAAd,KA6DA,OACE,sBAAKC,UAAWlB,EAAQ5C,KAAxB,UACE,cAAC+D,EAAA,EAAD,CAAYC,QAAQ,KAAKF,UAAWlB,EAAQpC,iBAA5C,wBAGA,cAACyD,EAAA,EAAD,CACEH,UAAWlB,EAAQ9B,iBACnBoD,QAAS,kBAAMnB,GAAmB,IAFpC,sBAMA,cAACoB,EAAA,EAAD,CACEL,UAAWlB,EAAQZ,YACnBoC,KAAMtB,EACNuB,QAAS,kBAAMtB,GAAmB,IAClCuB,sBAAoB,EACpBC,kBAAmBC,IACnBC,cAAe,CACbC,QAAS,KAPb,SAUE,cAACC,EAAA,EAAD,CAAMC,GAAI9B,EAAV,SACE,eAAC+B,EAAA,EAAD,CAAKC,UAAU,MAAMhB,UAAWlB,EAAQR,YAAxC,UACE,cAAC2B,EAAA,EAAD,CAAYC,QAAQ,KAAKF,UAAWlB,EAAQL,kBAA5C,yBAGA,cAACzC,EAAD,CACEiF,MAAO7B,EACP8B,MAAM,YACNlB,UAAWlB,EAAQJ,kBACnBwB,QAAQ,WACRiB,SAAU,SAACC,GAAD,OAAO/B,EAAiB+B,EAAEC,OAAOJ,QAC3CK,gBAAiB,CACftB,UAAWlB,EAAQhC,uBAErByE,WAAY,CACVvB,UAAWlB,EAAQ/B,wBAGvB,cAACf,EAAD,CACEiF,MAAO3B,EACP4B,MAAM,mBACNlB,UAAWlB,EAAQJ,kBACnBwB,QAAQ,WACRiB,SAAU,SAACC,GAAD,OAAO7B,EAAwB6B,EAAEC,OAAOJ,QAClDK,gBAAiB,CACftB,UAAWlB,EAAQhC,uBAErByE,WAAY,CACVvB,UAAWlB,EAAQ/B,wBAGvB,eAACgE,EAAA,EAAD,CAAKC,UAAU,MAAMhB,UAAWlB,EAAQF,wBAAxC,UACE,cAACuB,EAAA,EAAD,CACEH,UAAWlB,EAAQH,mBACnByB,QAAS,kBAhHF,WACnB,IAAMoB,EAAgB,sBACjB1B,GADiB,CAEpB,CACE2B,SAAUrC,EACVsC,gBAAiBpC,EACjBqC,UAAU,KAGd5B,EAASyB,GACTnC,EAAiB,IACjBE,EAAwB,IACxBN,GAAmB,GAoGQ2C,IAFjB,oBAMA,cAACzB,EAAA,EAAD,CACEH,UAAWlB,EAAQH,mBACnByB,QAAS,kBAAMnB,GAAmB,IAFpC,8BAWR,cAAC4C,EAAA,EAAD,CAAM7B,UAAWlB,EAAQzB,WAAzB,SACGyC,EAAMgC,KAAI,SAACC,EAAaC,GACvB,OACE,eAACC,EAAA,EAAD,CAEEjC,UAAWlB,EAAQrB,gBACnB2C,QAAS,kBAnFS,SAAC4B,GAC7B7C,GAAmB,GACnBM,EAAkBK,EAAMkC,GAAGP,UAC3B9B,EAAyBG,EAAMkC,GAAGN,iBAClC7B,EAAcmC,GA+EWE,CAAsBF,IAHvC,UAKE,cAACG,EAAA,EAAD,CACEnC,UAAWF,EAAMkC,GAAGL,SAAW7C,EAAQjB,gBAAkB,GACzDuE,QACE,cAACnC,EAAA,EAAD,CAAYD,UAAWlB,EAAQhB,mBAA/B,SACGiE,EAAKN,WAGVY,UACE,cAACpC,EAAA,EAAD,CAAYD,UAAWlB,EAAQd,qBAA/B,SACG+D,EAAKL,oBAIZ,eAACY,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYnC,QAAS,kBAnIhB,SAAC4B,GAClB,IAAML,EAAiB,YAAO7B,GAC9B6B,EAASK,GAAGL,UAAYA,EAASK,GAAGL,SACpC5B,EAAS4B,GAgI8Ba,CAAWR,IAAtC,SACE,cAAC,IAAD,CAAOhC,UAAWlB,EAAQb,eAE5B,cAACsE,EAAA,EAAD,CAAYnC,QAAS,kBA7Hd,SAAC4B,GACpB,IAAMS,EAAiB,YAAO3C,GAC9B2C,EAASC,OAAOV,EAAG,GACnBjC,EAAS0C,GA0H8BE,CAAaX,IAAxC,SACE,cAAC,IAAD,CAAYhC,UAAWlB,EAAQb,oBAtB9B+D,QA8Bb,cAAC3B,EAAA,EAAD,CACEL,UAAWlB,EAAQZ,YACnBoC,KAAMpB,EACNqB,QAAS,kBAAMpB,GAAmB,IAClCqB,sBAAoB,EACpBC,kBAAmBC,IACnBC,cAAe,CACbC,QAAS,KAPb,SAUE,cAACC,EAAA,EAAD,CAAMC,GAAI5B,EAAV,SACE,eAAC6B,EAAA,EAAD,CAAKC,UAAU,MAAMhB,UAAWlB,EAAQR,YAAxC,UACE,cAAC2B,EAAA,EAAD,CAAYC,QAAQ,KAAKF,UAAWlB,EAAQL,kBAA5C,2BAGA,cAACzC,EAAD,CACEiF,MAAOzB,EACP0B,MAAM,YACNlB,UAAWlB,EAAQJ,kBACnBwB,QAAQ,WACRiB,SAAU,SAACC,GAAD,OAAO3B,EAAkB2B,EAAEC,OAAOJ,QAC5CK,gBAAiB,CACftB,UAAWlB,EAAQhC,uBAErByE,WAAY,CACVvB,UAAWlB,EAAQ/B,wBAGvB,cAACf,EAAD,CACEiF,MAAOvB,EACPwB,MAAM,YACNlB,UAAWlB,EAAQJ,kBACnBwB,QAAQ,WACRiB,SAAU,SAACC,GAAD,OAAOzB,EAAyByB,EAAEC,OAAOJ,QACnDK,gBAAiB,CACftB,UAAWlB,EAAQhC,uBAErByE,WAAY,CACVvB,UAAWlB,EAAQ/B,wBAGvB,eAACgE,EAAA,EAAD,CAAKC,UAAU,MAAMhB,UAAWlB,EAAQF,wBAAxC,UACE,cAACuB,EAAA,EAAD,CACEH,UAAWlB,EAAQH,mBACnByB,QAAS,kBA1KF,WACnB,IAAMoB,EAAgB,YAAO1B,GAC7B0B,EAAQ5B,GAAY6B,SAClBjC,GAAkBgC,EAAQ5B,GAAY6B,SACxCD,EAAQ5B,GAAY8B,gBAClBhC,GAAyB8B,EAAQ5B,GAAY8B,gBAC/C3B,EAASyB,GACTnC,EAAiB,IACjBE,EAAwB,IACxBJ,GAAmB,GAiKQyD,IAFjB,oBAMA,cAACzC,EAAA,EAAD,CACEH,UAAWlB,EAAQH,mBACnByB,QAAS,kBAAMjB,GAAmB,IAFpC,kCC1YR0D,EAAQC,YAAe,CAC3BC,WAAY,CACVC,WAAY,CAAC,oBAAqB,cAAcC,KAAK,QAIzDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,CAAeR,MAAOA,EAAtB,SACE,cAAC,EAAD,QAGJS,SAASC,eAAe,W","file":"static/js/main.e2d0ca0a.chunk.js","sourcesContent":["import {\r\n  Button,\r\n  List,\r\n  IconButton,\r\n  ListItem,\r\n  ListItemSecondaryAction,\r\n  ListItemText,\r\n  makeStyles,\r\n  TextField,\r\n  Typography,\r\n  withStyles,\r\n  Modal,\r\n  Fade,\r\n  Backdrop,\r\n  Box,\r\n} from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport React, { useState } from \"react\";\r\nimport ITask from \"../Interface/ITask\";\r\n\r\n// Styles of the text field\r\nconst CssTextField = withStyles({\r\n  root: {\r\n    \"& label.Mui-focused\": {\r\n      color: \"#00ccff\",\r\n    },\r\n    \"& .MuiOutlinedInput-root\": {\r\n      \"& fieldset\": {\r\n        border: \"4px solid #00ccff\",\r\n      },\r\n      \"&:hover fieldset\": {\r\n        border: \"5px solid #00ccff\",\r\n      },\r\n      \"&.Mui-focused fieldset\": {\r\n        borderColor: \"white\",\r\n      },\r\n    },\r\n  },\r\n})(TextField);\r\n\r\n// General styles\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n  },\r\n  typography_class: {\r\n    textDecoration: \"underline\",\r\n    textDecorationColor: \"#00ccff\",\r\n    margin: \"40px auto 40px auto\",\r\n  },\r\n  textfield_label_class: {\r\n    color: \"white\",\r\n  },\r\n  textfield_text_class: {\r\n    color: \"white\",\r\n  },\r\n  add_button_class: {\r\n    width: \"30%\",\r\n    color: \"white\",\r\n    margin: \"10px auto 50px auto\",\r\n    border: \"4px solid #00ccff\",\r\n    borderRadius: \"50px\",\r\n    backgroundColor: \"#313131\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"#00ccff\",\r\n    },\r\n    \"&:active\": {\r\n      borderColor: \"#00ccff\",\r\n    },\r\n    \"&:focus\": {\r\n      boxShadow: \"0 0 0 0.2rem rgba(0,240,255,.5)\",\r\n    },\r\n  },\r\n  list_class: {\r\n    width: \"50%\",\r\n    height: \"58vh\",\r\n    margin: \"auto\",\r\n    overflowY: \"scroll\",\r\n    paddingRight: \"10px\",\r\n  },\r\n  \"@global\": {\r\n    \"*::-webkit-scrollbar\": {\r\n      width: \"5px\",\r\n    },\r\n    \"*::-webkit-scrollbar-thumb\": {\r\n      backgroundColor: \"#00ccff\",\r\n    },\r\n  },\r\n  list_item_class: {\r\n    border: \"4px solid #00ccff\",\r\n    borderRadius: \"50px\",\r\n    background: \"#313131\",\r\n    marginBottom: \"15px\",\r\n    paddingLeft: \"30px\",\r\n    \"&:hover\": {\r\n      background: \"#121212\",\r\n    },\r\n  },\r\n  task_done_class: {\r\n    textDecoration: \"line-through\",\r\n    textDecorationColor: \"red\",\r\n  },\r\n  primary_text_class: {\r\n    fontSize: \"18px\",\r\n    color: \"white\",\r\n  },\r\n  secondary_text_class: {\r\n    fontSize: \"12px\",\r\n    color: \"#a6a6a6\",\r\n  },\r\n  icon_class: {\r\n    color: \"#00ccff\",\r\n    fontSize: \"30px\",\r\n  },\r\n  modal_class: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  paper_class: {\r\n    color: \"white\",\r\n    backgroundColor: \"#212121\",\r\n    border: \"4px solid #00ccff\",\r\n    borderRadius: \"25px\",\r\n    position: \"absolute\",\r\n    width: \"30%\",\r\n    padding: \"15px 40px 15px 40px\",\r\n  },\r\n  modal_title_class: {\r\n    textAlign: \"center\",\r\n    margin: \"0px auto 15px auto\",\r\n  },\r\n  modal_input_class: {\r\n    width: \"100%\",\r\n    margin: \"10px auto\",\r\n  },\r\n  modal_button_class: {\r\n    color: \"#00ccff\",\r\n    width: \"35%\",\r\n    margin: \"10px 10px 10px 10px\",\r\n    \"&:hover\": {\r\n      color: \"white\",\r\n      backgroundColor: \"#00ccff\",\r\n    },\r\n    \"&:active\": {\r\n      borderColor: \"#00ccff\",\r\n    },\r\n    \"&:focus\": {\r\n      boxShadow: \"0 0 0 0.2rem rgba(0,240,255,.5)\",\r\n    },\r\n  },\r\n  modal_div_buttons_class: {\r\n    textAlign: \"center\",\r\n  },\r\n});\r\n\r\n/**\r\n * Function app\r\n * @returns The dom with the components of the app\r\n */\r\nfunction App(): JSX.Element {\r\n  /**\r\n   * Styles of the components\r\n   */\r\n  const classes = useStyles();\r\n  /**\r\n   * State to open the respective modals\r\n   */\r\n  const [openModalCreate, setOpenModalCreate] = useState<boolean>(false);\r\n  const [openModalUpdate, setOpenModalUpdate] = useState<boolean>(false);\r\n  /**\r\n   * State with the inputs of the task to create\r\n   */\r\n  const [inputTaskName, setInputTaskName] = useState<string>(\"\");\r\n  const [inputTaskDescription, setInputTaskDescription] = useState<string>(\"\");\r\n  /**\r\n   * State with the inputs of the task to update\r\n   */\r\n  const [updateTaskName, setUpdateTaskName] = useState<string>();\r\n  const [updateTaskDescription, setUpdateTaskDescription] = useState<string>();\r\n  /**\r\n   * Id of the task selected to update\r\n   */\r\n  const [idSelected, setIdSelected] = useState<number>(-1);\r\n  /**\r\n   * State with all task saved\r\n   */\r\n  const [tasks, setTasks] = useState<ITask[]>([]);\r\n  /**\r\n   * Save a task, clean the inputs and close the modal\r\n   */\r\n  const handleSubmit = (): void => {\r\n    const newTask: ITask[] = [\r\n      ...tasks,\r\n      {\r\n        taskName: inputTaskName,\r\n        taskDescription: inputTaskDescription,\r\n        taskDone: false,\r\n      },\r\n    ];\r\n    setTasks(newTask);\r\n    setInputTaskName(\"\");\r\n    setInputTaskDescription(\"\");\r\n    setOpenModalCreate(false);\r\n  };\r\n  /**\r\n   * Change the state of done of a task\r\n   * @param i id of the task to change done state\r\n   */\r\n  const toggleDone = (i: number): void => {\r\n    const taskDone: ITask[] = [...tasks];\r\n    taskDone[i].taskDone = !taskDone[i].taskDone;\r\n    setTasks(taskDone);\r\n  };\r\n  /**\r\n   * Delete a task\r\n   * @param i id of the task to delete\r\n   */\r\n  const handleDelete = (i: number): void => {\r\n    const newTasks: ITask[] = [...tasks];\r\n    newTasks.splice(i, 1);\r\n    setTasks(newTasks);\r\n  };\r\n  /**\r\n   * Update the information of a task, clean the state of the inputs and close the modal\r\n   */\r\n  const handleUpdate = (): void => {\r\n    const newTask: ITask[] = [...tasks];\r\n    newTask[idSelected].taskName =\r\n      updateTaskName || newTask[idSelected].taskName;\r\n    newTask[idSelected].taskDescription =\r\n      updateTaskDescription || newTask[idSelected].taskDescription;\r\n    setTasks(newTask);\r\n    setInputTaskName(\"\");\r\n    setInputTaskDescription(\"\");\r\n    setOpenModalUpdate(false);\r\n  };\r\n  /**\r\n   * Set the id of the task to update and open the modal to update\r\n   * @param i id of the task to update\r\n   */\r\n  const handleOpenUpdateModal = (i: number) => {\r\n    setOpenModalUpdate(true);\r\n    setUpdateTaskName(tasks[i].taskName);\r\n    setUpdateTaskDescription(tasks[i].taskDescription);\r\n    setIdSelected(i);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Typography variant=\"h2\" className={classes.typography_class}>\r\n        To Do list\r\n      </Typography>\r\n      <Button\r\n        className={classes.add_button_class}\r\n        onClick={() => setOpenModalCreate(true)}\r\n      >\r\n        Add task\r\n      </Button>\r\n      <Modal\r\n        className={classes.modal_class}\r\n        open={openModalCreate}\r\n        onClose={() => setOpenModalCreate(false)}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}\r\n      >\r\n        <Fade in={openModalCreate}>\r\n          <Box component=\"div\" className={classes.paper_class}>\r\n            <Typography variant=\"h4\" className={classes.modal_title_class}>\r\n              Create task\r\n            </Typography>\r\n            <CssTextField\r\n              value={inputTaskName}\r\n              label=\"Task name\"\r\n              className={classes.modal_input_class}\r\n              variant=\"outlined\"\r\n              onChange={(e) => setInputTaskName(e.target.value)}\r\n              InputLabelProps={{\r\n                className: classes.textfield_label_class,\r\n              }}\r\n              InputProps={{\r\n                className: classes.textfield_text_class,\r\n              }}\r\n            />\r\n            <CssTextField\r\n              value={inputTaskDescription}\r\n              label=\"Task description\"\r\n              className={classes.modal_input_class}\r\n              variant=\"outlined\"\r\n              onChange={(e) => setInputTaskDescription(e.target.value)}\r\n              InputLabelProps={{\r\n                className: classes.textfield_label_class,\r\n              }}\r\n              InputProps={{\r\n                className: classes.textfield_text_class,\r\n              }}\r\n            />\r\n            <Box component=\"div\" className={classes.modal_div_buttons_class}>\r\n              <Button\r\n                className={classes.modal_button_class}\r\n                onClick={() => handleSubmit()}\r\n              >\r\n                Create\r\n              </Button>\r\n              <Button\r\n                className={classes.modal_button_class}\r\n                onClick={() => setOpenModalCreate(false)}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Box>\r\n          </Box>\r\n        </Fade>\r\n      </Modal>\r\n\r\n      <List className={classes.list_class}>\r\n        {tasks.map((task: ITask, i: number) => {\r\n          return (\r\n            <ListItem\r\n              key={i}\r\n              className={classes.list_item_class}\r\n              onClick={() => handleOpenUpdateModal(i)}\r\n            >\r\n              <ListItemText\r\n                className={tasks[i].taskDone ? classes.task_done_class : \"\"}\r\n                primary={\r\n                  <Typography className={classes.primary_text_class}>\r\n                    {task.taskName}\r\n                  </Typography>\r\n                }\r\n                secondary={\r\n                  <Typography className={classes.secondary_text_class}>\r\n                    {task.taskDescription}\r\n                  </Typography>\r\n                }\r\n              />\r\n              <ListItemSecondaryAction>\r\n                <IconButton onClick={() => toggleDone(i)}>\r\n                  <Check className={classes.icon_class} />\r\n                </IconButton>\r\n                <IconButton onClick={() => handleDelete(i)}>\r\n                  <DeleteIcon className={classes.icon_class} />\r\n                </IconButton>\r\n              </ListItemSecondaryAction>\r\n            </ListItem>\r\n          );\r\n        })}\r\n      </List>\r\n\r\n      <Modal\r\n        className={classes.modal_class}\r\n        open={openModalUpdate}\r\n        onClose={() => setOpenModalUpdate(false)}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}\r\n      >\r\n        <Fade in={openModalUpdate}>\r\n          <Box component=\"div\" className={classes.paper_class}>\r\n            <Typography variant=\"h4\" className={classes.modal_title_class}>\r\n              Edit the task\r\n            </Typography>\r\n            <CssTextField\r\n              value={updateTaskName}\r\n              label=\"Task name\"\r\n              className={classes.modal_input_class}\r\n              variant=\"outlined\"\r\n              onChange={(e) => setUpdateTaskName(e.target.value)}\r\n              InputLabelProps={{\r\n                className: classes.textfield_label_class,\r\n              }}\r\n              InputProps={{\r\n                className: classes.textfield_text_class,\r\n              }}\r\n            />\r\n            <CssTextField\r\n              value={updateTaskDescription}\r\n              label=\"Task name\"\r\n              className={classes.modal_input_class}\r\n              variant=\"outlined\"\r\n              onChange={(e) => setUpdateTaskDescription(e.target.value)}\r\n              InputLabelProps={{\r\n                className: classes.textfield_label_class,\r\n              }}\r\n              InputProps={{\r\n                className: classes.textfield_text_class,\r\n              }}\r\n            />\r\n            <Box component=\"div\" className={classes.modal_div_buttons_class}>\r\n              <Button\r\n                className={classes.modal_button_class}\r\n                onClick={() => handleUpdate()}\r\n              >\r\n                Update\r\n              </Button>\r\n              <Button\r\n                className={classes.modal_button_class}\r\n                onClick={() => setOpenModalUpdate(false)}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Box>\r\n          </Box>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./pages/App\";\r\n\r\n/**\r\n * constant with the font of the app\r\n */\r\nconst theme = createMuiTheme({\r\n  typography: {\r\n    fontFamily: [\"Gloria Hallelujah\", \"sans-serif\"].join(\",\"),\r\n  },\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={theme}>\r\n      <App />\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}